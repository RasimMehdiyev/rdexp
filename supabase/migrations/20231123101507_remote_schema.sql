alter table "public"."Coach" drop constraint "Coach_email_key";

alter table "public"."Coach" drop constraint "Coach_team_fkey";

alter table "public"."Player" drop constraint "Player_phoneNumber_key";

alter table "public"."Player" drop constraint "Player_team_fkey";

alter table "public"."Player" drop constraint "reg_users_email_check";

alter table "public"."Player" drop constraint "reg_users_email_key";

alter table "public"."Player" drop constraint "reg_users_username_check";

alter table "public"."Player" drop constraint "reg_users_username_key";

alter table "public"."Coach" drop constraint "Coach_pkey";

alter table "public"."Player" drop constraint "reg_users_pkey";

alter table "public"."Team" drop constraint "Team_pkey";

drop index if exists "public"."Coach_email_key";

drop index if exists "public"."Coach_pkey";

drop index if exists "public"."Player_phoneNumber_key";

drop index if exists "public"."reg_users_email_key";

drop index if exists "public"."reg_users_pkey";

drop index if exists "public"."reg_users_username_key";

drop index if exists "public"."Team_pkey";

drop table "public"."Coach";

drop table "public"."Player";

drop table "public"."Team";

create table "public"."event" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text,
    "team" bigint,
    "datetime" timestamp with time zone,
    "location" text,
    "type" text
);


alter table "public"."event" enable row level security;

create table "public"."event_users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "event_id" bigint,
    "user_id" bigint,
    "is_attending" boolean default false
);


alter table "public"."event_users" enable row level security;

create table "public"."roles" (
    "id" bigint generated by default as identity not null,
    "role_title" text
);


alter table "public"."roles" enable row level security;

create table "public"."team" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "team_name" text,
    "ranking" smallint,
    "coach_id" bigint
);


alter table "public"."team" enable row level security;

create table "public"."team_users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "team_id" bigint not null,
    "user_id" bigint not null,
    "role_id" bigint
);


alter table "public"."team_users" enable row level security;

create table "public"."users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "role_id" bigint,
    "user_id" text,
    "full_name" text,
    "phone_number" text,
    "email" text not null,
    "bio" text,
    "profile_picture" text,
    "number" text
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX "Users_pkey" ON public.users USING btree (id);

CREATE UNIQUE INDEX event_pkey ON public.event USING btree (id);

CREATE UNIQUE INDEX event_users_pkey ON public.event_users USING btree (id);

CREATE UNIQUE INDEX roles_pkey ON public.roles USING btree (id);

CREATE UNIQUE INDEX team_users_pkey ON public.team_users USING btree (id);

CREATE UNIQUE INDEX "Team_pkey" ON public.team USING btree (id);

alter table "public"."event" add constraint "event_pkey" PRIMARY KEY using index "event_pkey";

alter table "public"."event_users" add constraint "event_users_pkey" PRIMARY KEY using index "event_users_pkey";

alter table "public"."roles" add constraint "roles_pkey" PRIMARY KEY using index "roles_pkey";

alter table "public"."team" add constraint "Team_pkey" PRIMARY KEY using index "Team_pkey";

alter table "public"."team_users" add constraint "team_users_pkey" PRIMARY KEY using index "team_users_pkey";

alter table "public"."users" add constraint "Users_pkey" PRIMARY KEY using index "Users_pkey";

alter table "public"."event_users" add constraint "event_users_event_id_fkey" FOREIGN KEY (event_id) REFERENCES event(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."event_users" validate constraint "event_users_event_id_fkey";

alter table "public"."event_users" add constraint "event_users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."event_users" validate constraint "event_users_user_id_fkey";

alter table "public"."team" add constraint "team_coach_id_fkey" FOREIGN KEY (coach_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."team" validate constraint "team_coach_id_fkey";

alter table "public"."team_users" add constraint "team_users_role_id_fkey" FOREIGN KEY (role_id) REFERENCES roles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."team_users" validate constraint "team_users_role_id_fkey";

alter table "public"."team_users" add constraint "team_users_team_id_fkey" FOREIGN KEY (team_id) REFERENCES team(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."team_users" validate constraint "team_users_team_id_fkey";

alter table "public"."team_users" add constraint "team_users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."team_users" validate constraint "team_users_user_id_fkey";

alter table "public"."users" add constraint "users_role_id_fkey" FOREIGN KEY (role_id) REFERENCES roles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_role_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.add_coach(fullname text, password text, email text, team integer, phonenumber text)
 RETURNS void
 LANGUAGE sql
AS $function$    insert into "Coach" ("fullName", "password", "email", "team", "phoneNumber") values ($1, $2, $3, $4, $5);$function$
;

CREATE OR REPLACE FUNCTION public.add_player(fullname text, password text, email text, team integer, phonenumber text)
 RETURNS void
 LANGUAGE sql
AS $function$insert into "Player" ("fullName", "password", "email", "team","phoneNumber") values ($1, $2, $3, $4, $5);
$function$
;

CREATE OR REPLACE FUNCTION public.addplayer(fullname character varying, password integer, email character varying, team integer)
 RETURNS void
 LANGUAGE sql
AS $function$
    insert into "Player" ("fullName", "password", "email", "team") values ($1, $2, $3, $4);
$function$
;

CREATE OR REPLACE FUNCTION public.getcoach(id bigint)
 RETURNS json
 LANGUAGE sql
AS $function$
  select row_to_json(row) from (
    select * from "Coach"
    where id = $1
  ) row;
$function$
;

CREATE OR REPLACE FUNCTION public.getcoaches()
 RETURNS json
 LANGUAGE sql
AS $function$
  select json_agg(row_to_json(row)) from (
        select * from "Coach"
  ) row;
$function$
;

CREATE OR REPLACE FUNCTION public.getplayer(id bigint)
 RETURNS json
 LANGUAGE sql
AS $function$
  select row_to_json(row) from (
    select * from "Player"
    where id = $1
  ) row;
$function$
;

CREATE OR REPLACE FUNCTION public.getplayers()
 RETURNS json
 LANGUAGE sql
AS $function$
  select json_agg(row_to_json(row)) from (
        select * from "Player"
  ) row;
$function$
;

create policy "Enable all actions for authenticated users only"
on "public"."event"
as permissive
for all
to authenticated
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."event"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."event"
as permissive
for select
to authenticated
using (true);


create policy "Enable all actions for authenticated users only"
on "public"."event_users"
as permissive
for all
to authenticated
with check (true);


create policy "Enable all actions for authenticated users only"
on "public"."roles"
as permissive
for all
to authenticated
with check (true);


create policy "Enable all actions for authenticated users only"
on "public"."team"
as permissive
for all
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."team"
as permissive
for all
to public
using (true)
with check (true);


create policy "Enable all actions for authenticated users only"
on "public"."team_users"
as permissive
for all
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."team_users"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable all actions for authenticated users only"
on "public"."users"
as permissive
for all
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."users"
as permissive
for all
to authenticated
using (true)
with check (true);



